{"version":3,"sources":["components/Icon.js","App.js","index.js"],"names":["Icon","name","size","className","items","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeItem","itemNumber","toast","type","every","ele","Container","position","Row","Col","md","map","item","index","Card","color","onClick","CardBody","Button","block","ReactDOM","render","document","getElementById"],"mappings":"2NAceA,EAXF,SAAC,GACZ,OADyB,EAAXC,MAEZ,IAAK,SACH,OAAO,kBAAC,IAAD,CAAaC,KAAM,GAAIC,UAAU,UAC1C,IAAK,QACH,OAAO,kBAAC,IAAD,CAASD,KAAM,GAAIC,UAAU,UACtC,QACE,OAAO,kBAAC,IAAD,CAAQD,KAAM,GAAIC,UAAU,Y,qECDnCC,G,MAAQ,IAAIC,MAAM,GAAGC,KAAK,UAiGjBC,EA/FH,WAAO,IAAD,EACcC,oBAAS,GADvB,mBACTC,EADS,KACAC,EADA,OAEoBF,mBAAS,IAF7B,mBAETG,EAFS,KAEGC,EAFH,KA6CVC,EAAa,SAAAC,GACjB,OAAIH,EACKI,YAAMJ,EAAY,CAAEK,KAAM,YAGT,UAAtBZ,EAAMU,GAIDC,YAAM,iBAAkB,CAAEC,KAAM,WAHvCZ,EAAMU,GAAcL,EAAU,QAAU,SACxCC,GAAYD,QAvCVL,EAAM,KAAOA,EAAM,IAAKA,EAAM,KAAOA,EAAM,IAAkB,UAAbA,EAAM,GACxDQ,EAAc,GAAD,OAAIR,EAAM,GAAV,SAEO,UAAbA,EAAM,IAAiBA,EAAM,KAAOA,EAAM,IAAKA,EAAM,KAAOA,EAAM,GACzEQ,EAAc,GAAD,OAAIR,EAAM,GAAV,SAEO,UAAbA,EAAM,IAAiBA,EAAM,KAAOA,EAAM,IAAKA,EAAM,KAAOA,EAAM,GACzEQ,EAAc,GAAD,OAAIR,EAAM,GAAV,SAEO,UAAbA,EAAM,IAAiBA,EAAM,KAAOA,EAAM,IAAKA,EAAM,KAAOA,EAAM,GACzEQ,EAAc,GAAD,OAAIR,EAAM,GAAV,SAEO,UAAbA,EAAM,IAAiBA,EAAM,KAAOA,EAAM,IAAKA,EAAM,KAAOA,EAAM,GACzEQ,EAAc,GAAD,OAAIR,EAAM,GAAV,SAEO,UAAbA,EAAM,IAAiBA,EAAM,KAAOA,EAAM,IAAKA,EAAM,KAAOA,EAAM,GACzEQ,EAAc,GAAD,OAAIR,EAAM,GAAV,SAEO,UAAbA,EAAM,IAAiBA,EAAM,KAAOA,EAAM,IAAKA,EAAM,KAAOA,EAAM,GACzEQ,EAAc,GAAD,OAAIR,EAAM,GAAV,SAEO,UAAbA,EAAM,IAAiBA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,GAE1EQ,EAAc,GAAD,OAAIR,EAAM,GAAV,SAGVA,EAAMa,OAAM,SAAAC,GAAG,MAAQ,UAANA,MAClBN,EAAc,kBAoBpB,OACE,kBAACO,EAAA,EAAD,CAAWhB,UAAU,OACnB,kBAAC,IAAD,CAAgBiB,SAAS,kBACzB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGpB,UAAU,eACnBQ,EACC,yBAAKR,UAAU,aACb,wBAAIA,UAAU,2CACXQ,IAKL,wBAAIR,UAAU,8BACXM,EAAU,QAAU,SADvB,UAIF,yBAAKN,UAAU,QACZC,EAAMoB,KAAI,SAACC,EAAMC,GAAP,OACT,kBAACC,EAAA,EAAD,CAAMC,MAAM,QAAQC,QAAS,kBAAMhB,EAAWa,KAC5C,kBAACI,EAAA,EAAD,CAAU3B,UAAU,OAClB,kBAAC,EAAD,CAAMF,KAAMwB,UAKpB,kBAACM,EAAA,EAAD,CAAQH,MAAM,UAAUI,OAAK,EAACH,QAlFnB,WACjBnB,GAAW,GACXE,EAAc,IACdR,EAAME,KAAK,QAAS,EAAG,IA+EkCH,UAAU,QAA7D,uBC7FV8B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.f6f9b0cb.chunk.js","sourcesContent":["import React from \"react\";\nimport { FaTimes, FaRegCircle,FaGrin } from \"react-icons/fa\";\n\nconst Icon = ({ name }) => {\n  switch (name) {\n    case \"circle\":\n      return <FaRegCircle size={70} className=\"icons\" />;\n    case \"cross\":\n      return <FaTimes size={70} className=\"icons\" />;\n    default:\n      return <FaGrin size={70} className=\"icons\" />;\n  }\n};\n\nexport default Icon;\n","import React, { useState } from \"react\";\nimport Icon from \"./components/Icon\";\n\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { Card, CardBody, Container, Button,  Row ,Col} from \"reactstrap\";\nimport \"./App.css\";\n\nconst items = new Array(9).fill(\"empty\");\n\nconst App = () => {\n  const [isCross, setIsCross] = useState(false);\n  const [winMessage, setWinMessage] = useState(\"\");\n\n  const reloadGame = () => {\n    setIsCross(false);\n    setWinMessage(\"\");\n    items.fill(\"empty\", 0, 9);\n  };\n\n  const checkIsWinner = () => {\n    //  checking  winner of the game\n    \n    if (items[0] === items[1] &&items[0] === items[2] &&items[0] !== \"empty\") {\n      setWinMessage(`${items[0]} won`);\n    } \n    else if (items[3] !== \"empty\" &&items[3] === items[4] &&items[4] === items[5]) {\n      setWinMessage(`${items[3]} won`);\n    } \n    else if (items[6] !== \"empty\" &&items[6] === items[7] &&items[7] === items[8]) {\n      setWinMessage(`${items[6]} won`);\n    } \n    else if (items[0] !== \"empty\" &&items[0] === items[3] &&items[3] === items[6]) {\n      setWinMessage(`${items[0]} won`);\n    } \n    else if (items[1] !== \"empty\" &&items[1] === items[4] &&items[4] === items[7]) {\n      setWinMessage(`${items[1]} won`);\n    } \n    else if (items[2] !== \"empty\" &&items[2] === items[5] &&items[5] === items[8]) {\n      setWinMessage(`${items[2]} won`);\n    } \n    else if (items[0] !== \"empty\" &&items[0] === items[4] &&items[4] === items[8]) {\n      setWinMessage(`${items[0]} won`);\n    } \n    else if (items[2] !== \"empty\" &&items[2] === items[4] && items[4] === items[6]\n    ) {\n      setWinMessage(`${items[2]} won`);\n    }\n    else{\n      if(items.every(ele=>ele!==\"empty\")){\n        setWinMessage(`No body won`);\n      }\n    }\n  };\n\n  const changeItem = itemNumber => {\n    if (winMessage) {\n      return toast(winMessage, { type: \"success\" });\n    }\n\n    if (items[itemNumber] === \"empty\") {\n      items[itemNumber] = isCross ? \"cross\" : \"circle\";\n      setIsCross(!isCross);\n    } else {\n      return toast(\"Already filled\", { type: \"error\" });\n    }\n\n    checkIsWinner();\n  };\n\n  return (\n    <Container className=\"p-5\">\n      <ToastContainer position=\"bottom-center\" />\n      <Row>\n        <Col md={6} className=\"offset-md-3\">\n          {winMessage ? (\n            <div className=\"mb-2 mt-2\">\n              <h1 className=\"text-success text-uppercase text-center\">\n                {winMessage}\n              </h1>\n              \n            </div>\n          ) : (\n            <h1 className=\" text-success text-center \">\n              {isCross ? \"Cross\" : \"Circle\"} turns\n            </h1>\n          )}\n          <div className=\"grid\">\n            {items.map((item, index) => (\n              <Card color=\"white\" onClick={() => changeItem(index)}>\n                <CardBody className=\"box\">\n                  <Icon name={item} />\n                </CardBody>\n              </Card>\n            ))}\n          </div>\n          <Button color=\"success\" block onClick={reloadGame} className=\"mt-2\">\n                Reload the game\n              </Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}